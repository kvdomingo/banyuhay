version: '3'

env:
  NAME: banyuhay
  COMMIT_SHA:
    sh: git rev-parse HEAD

dotenv:
  - ./api/.env
  - ./pipelines/.env
  - ./ui/.env

tasks:
  default:
    cmd:
      task: up

  setup:
    desc: Setup the project
    cmds:
      - pip install -U pre-commit
      - pre-commit install
      - task: setup-api
      - task: setup-pipelines
      - task: setup-ui

  setup-api:
    desc: Setup backend
    dir: api
    cmd: poetry install --no-root --with dev

  setup-pipelines:
    desc: Setup pipelines
    dir: pipelines
    cmd: poetry install --no-root --with dev

  setup-ui:
    desc: Setup frontend
    dir: ui
    cmd: bun install

  up:
    desc: Build and start containers
    cmd: docker compose --project-name {{.NAME}} up --detach --build --remove-orphans

  stop:
    desc: Stop containers
    cmd: docker compose --project-name {{.NAME}} stop

  logs:
    desc: Follow logs
    interactive: true
    cmd: docker compose --project-name {{.NAME}} logs --follow {{.CLI_ARGS}}

  restart:
    desc: Restart containers
    cmd: docker compose --project-name {{.NAME}} restart {{.CLI_ARGS}}

  down:
    desc: Stop and remove containers
    cmd: docker compose --project-name {{.NAME}} down

  clean:
    desc: Nuke everything
    cmd: docker compose --project-name {{.NAME}} down --volumes --remove-orphans

  exec:
    desc: Execute a command in a running container
    cmd: docker compose --project-name {{.NAME}} exec {{.CLI_ARGS}}

  generate-migration:
    desc: Generate a new migration revision file
    cmd: task exec -- api poetry run alembic revision -m '{{.CLI_ARGS}}'

  migrate:
    desc: Apply all migrations
    cmd: task exec -- api poetry run alembic upgrade head

  unmigrate:
    desc: Undo 1 migration
    cmd: task exec -- api poetry run alembic downgrade -1

  psql:
    desc: Attach to the db container and run psql
    interactive: true
    cmd: task exec -- db psql -U {{.POSTGRESQL_USERNAME}} -d {{.POSTGRESQL_DATABASE}}

  load-fixtures:
    desc: Load database fixtures
    cmd: task exec -- api poetry run python -m scripts.load_fixtures toilets reviews

  build-cr:
    desc: Build for production
    cmd: >
      docker build
      -t git.lab.kvd.studio/r/banyuhay:{{.COMMIT_SHA}}
      -t git.lab.kvd.studio/r/banyuhay:latest
      --build-arg VITE_PUBLIC_APP_HOST=https://banyuh.ai
      --build-arg VITE_PUBLIC_STYTCH_PUBLIC_TOKEN={{.VITE_PUBLIC_STYTCH_PUBLIC_TOKEN}}
      -f prod.Dockerfile .

  push-cr:
    desc: Push production image
    cmds:
      - docker push git.lab.kvd.studio/r/banyuhay:{{.COMMIT_SHA}}
      - docker push git.lab.kvd.studio/r/banyuhay:latest

  deploy:
    desc: Deploy to production
    cmds:
      - task: build-cr
      - task: push-cr
      - helmfile apply -f infra/helm/helmfile.yaml

  tf-init:
    desc: Initialize Terraform
    dir: infra/terraform
    cmd: terraform init

  tf-plan:
    desc: Generate Terraform plan
    dir: infra/terraform
    cmd: terraform plan -out=.tfplan

  tf-apply:
    desc: Apply Terraform plan
    dir: infra/terraform
    cmd: terraform apply .tfplan
