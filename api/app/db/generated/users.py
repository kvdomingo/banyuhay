# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.29.0
# source: users.sql
from collections.abc import AsyncIterator, Iterator

import sqlalchemy
import sqlalchemy.ext.asyncio

from app.db.generated import models

CREATE_USER = """-- name: create_user \\:one
INSERT INTO users (
    id, first_name, last_name, avatar
)
VALUES (
           :p1, :p2, :p3, :p4
       )
RETURNING id, created, modified, first_name, last_name, full_name, avatar
"""


DELETE_USER = """-- name: delete_user \\:one
DELETE
FROM users
WHERE id = :p1
RETURNING id
"""


GET_USER = """-- name: get_user \\:one
SELECT id, created, modified, first_name, last_name, full_name, avatar
FROM users
WHERE id = :p1
"""


LIST_USERS = """-- name: list_users \\:many
SELECT id, created, modified, first_name, last_name, full_name, avatar
FROM users
"""


UPDATE_USER = """-- name: update_user \\:one
UPDATE users
SET first_name = COALESCE(:p1, first_name),
    last_name  = COALESCE(:p2, last_name),
    avatar     = COALESCE(:p3, avatar)
WHERE id = :p4
RETURNING id, created, modified, first_name, last_name, full_name, avatar
"""


class Querier:
    def __init__(self, conn: sqlalchemy.engine.Connection):
        self._conn = conn

    def create_user(
        self,
        *,
        id: str,
        first_name: str | None,
        last_name: str | None,
        avatar: str | None,
    ) -> models.User | None:
        row = self._conn.execute(
            sqlalchemy.text(CREATE_USER),
            {
                "p1": id,
                "p2": first_name,
                "p3": last_name,
                "p4": avatar,
            },
        ).first()
        if row is None:
            return None
        return models.User(
            id=row[0],
            created=row[1],
            modified=row[2],
            first_name=row[3],
            last_name=row[4],
            full_name=row[5],
            avatar=row[6],
        )

    def delete_user(self, *, id: str) -> str | None:
        row = self._conn.execute(sqlalchemy.text(DELETE_USER), {"p1": id}).first()
        if row is None:
            return None
        return row[0]

    def get_user(self, *, id: str) -> models.User | None:
        row = self._conn.execute(sqlalchemy.text(GET_USER), {"p1": id}).first()
        if row is None:
            return None
        return models.User(
            id=row[0],
            created=row[1],
            modified=row[2],
            first_name=row[3],
            last_name=row[4],
            full_name=row[5],
            avatar=row[6],
        )

    def list_users(self) -> Iterator[models.User]:
        result = self._conn.execute(sqlalchemy.text(LIST_USERS))
        for row in result:
            yield models.User(
                id=row[0],
                created=row[1],
                modified=row[2],
                first_name=row[3],
                last_name=row[4],
                full_name=row[5],
                avatar=row[6],
            )

    def update_user(
        self,
        *,
        first_name: str | None,
        last_name: str | None,
        avatar: str | None,
        id: str,
    ) -> models.User | None:
        row = self._conn.execute(
            sqlalchemy.text(UPDATE_USER),
            {
                "p1": first_name,
                "p2": last_name,
                "p3": avatar,
                "p4": id,
            },
        ).first()
        if row is None:
            return None
        return models.User(
            id=row[0],
            created=row[1],
            modified=row[2],
            first_name=row[3],
            last_name=row[4],
            full_name=row[5],
            avatar=row[6],
        )


class AsyncQuerier:
    def __init__(self, conn: sqlalchemy.ext.asyncio.AsyncConnection):
        self._conn = conn

    async def create_user(
        self,
        *,
        id: str,
        first_name: str | None,
        last_name: str | None,
        avatar: str | None,
    ) -> models.User | None:
        row = (
            await self._conn.execute(
                sqlalchemy.text(CREATE_USER),
                {
                    "p1": id,
                    "p2": first_name,
                    "p3": last_name,
                    "p4": avatar,
                },
            )
        ).first()
        if row is None:
            return None
        return models.User(
            id=row[0],
            created=row[1],
            modified=row[2],
            first_name=row[3],
            last_name=row[4],
            full_name=row[5],
            avatar=row[6],
        )

    async def delete_user(self, *, id: str) -> str | None:
        row = (
            await self._conn.execute(sqlalchemy.text(DELETE_USER), {"p1": id})
        ).first()
        if row is None:
            return None
        return row[0]

    async def get_user(self, *, id: str) -> models.User | None:
        row = (await self._conn.execute(sqlalchemy.text(GET_USER), {"p1": id})).first()
        if row is None:
            return None
        return models.User(
            id=row[0],
            created=row[1],
            modified=row[2],
            first_name=row[3],
            last_name=row[4],
            full_name=row[5],
            avatar=row[6],
        )

    async def list_users(self) -> AsyncIterator[models.User]:
        result = await self._conn.stream(sqlalchemy.text(LIST_USERS))
        async for row in result:
            yield models.User(
                id=row[0],
                created=row[1],
                modified=row[2],
                first_name=row[3],
                last_name=row[4],
                full_name=row[5],
                avatar=row[6],
            )

    async def update_user(
        self,
        *,
        first_name: str | None,
        last_name: str | None,
        avatar: str | None,
        id: str,
    ) -> models.User | None:
        row = (
            await self._conn.execute(
                sqlalchemy.text(UPDATE_USER),
                {
                    "p1": first_name,
                    "p2": last_name,
                    "p3": avatar,
                    "p4": id,
                },
            )
        ).first()
        if row is None:
            return None
        return models.User(
            id=row[0],
            created=row[1],
            modified=row[2],
            first_name=row[3],
            last_name=row[4],
            full_name=row[5],
            avatar=row[6],
        )
