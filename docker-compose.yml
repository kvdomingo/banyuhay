name: banyuhay

volumes:
  venv-data:
  dagster-venv-data:
  db-data:
  dagster-db-data:
  pgadmin-data:

services:
  api:
    build:
      context: ./api
      dockerfile: ../Dockerfile
    image: kvdomingo/banyuhay-api
    restart: unless-stopped
    init: true
    environment:
      PYTHON_ENV: development
      POSTGRESQL_USERNAME: postgres
      POSTGRESQL_PASSWORD: postgres
      POSTGRESQL_DATABASE: postgres
      POSTGRESQL_HOST: db
      API_HOST: http://localhost:8000
      APP_HOST: http://localhost:3000
      SECRET_KEY: ${SECRET_KEY}
      STYTCH_PROJECT_ID: ${STYTCH_PROJECT_ID}
      STYTCH_SECRET: ${STYTCH_SECRET}
      STYTCH_PUBLIC_TOKEN: ${STYTCH_PUBLIC_TOKEN}
    command:
      - >
        uv sync --frozen;
        uv run alembic upgrade head;
        exec uv run fastapi dev --host 0.0.0.0 --port 8000 --reload --app app app/app.py;
    volumes:
      - ./api:/app
      - venv-data:/app/.venv
    ports:
      - '8000:8000'
    healthcheck:
      test: [ 'CMD', 'curl', '-fL', 'http://localhost:8000/api/health' ]
    depends_on:
      db:
        condition: service_healthy

  ui:
    image: oven/bun:1.2-alpine
    restart: unless-stopped
    init: true
    working_dir: /app
    environment:
      NODE_ENV: development
      VITE_PUBLIC_APP_HOST: http://localhost:3000
      VITE_PUBLIC_STYTCH_PUBLIC_TOKEN: ${STYTCH_PUBLIC_TOKEN}
    entrypoint:
      - /bin/sh
      - -c
      - bun install && exec bun run dev
    volumes:
      - ./ui:/app
    ports:
      - '3000:3000'

  db:
    image: bitnami/postgresql:16.4.0-debian-12-r8
    restart: unless-stopped
    environment:
      POSTGRESQL_PASSWORD: postgres
    volumes:
      - db-data:/bitnami/postgresql
    ports:
      - '5432:5432'
    healthcheck:
      test: [ 'CMD', 'pg_isready', '-U', '$${POSTGRESQL_USERNAME}', '-d', '$${POSTGRESQL_DATABASE}' ]
      start_period: 10s
      retries: 3
      interval: 20s
      timeout: 2s

  dagster:
    build:
      context: ./pipelines
      dockerfile: ../Dockerfile
    image: kvdomingo/banyuhay-pipelines
    restart: unless-stopped
    init: true
    environment:
      PYTHON_ENV: development
      DAGSTER_HOME: /opt/dagster
      POSTGRESQL_USERNAME: postgres
      POSTGRESQL_PASSWORD: postgres
      POSTGRESQL_DATABASE: postgres
      GOOGLE_MAPS_API_KEY: ${GOOGLE_MAPS_API_KEY}
    command:
      - |
        uv sync --frozen
        mkdir -p $${DAGSTER_HOME}
        cp /app/dagster.yaml $${DAGSTER_HOME}/dagster.yaml
        exec uv run dagster dev -h 0.0.0.0 -p 3030
    volumes:
      - ./pipelines:/app
      - dagster-venv-data:/app/.venv
    ports:
      - '3030:3030'
    depends_on:
      dagster-db:
        condition: service_healthy

  dagster-db:
    image: bitnami/postgresql:16.4.0-debian-12-r8
    restart: unless-stopped
    environment:
      POSTGRESQL_PASSWORD: postgres
    volumes:
      - dagster-db-data:/bitnami/postgresql
    healthcheck:
      test: [ 'CMD', 'pg_isready', '-U', '$${POSTGRESQL_USERNAME}', '-d', '$${POSTGRESQL_DATABASE}' ]
      start_period: 10s
      retries: 3
      interval: 20s
      timeout: 2s

  pgadmin:
    image: dpage/pgadmin4:9
    environment:
      PGADMIN_LISTEN_ADDRESS: 0.0.0.0
      PGADMIN_LISTEN_PORT: 5000
      PGADMIN_DEFAULT_EMAIL: hello@kvd.studio
      PGADMIN_DEFAULT_PASSWORD: admin
    volumes:
      - pgadmin-data:/pgadmin
    ports:
      - "5000:5000"
